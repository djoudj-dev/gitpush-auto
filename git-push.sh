#!/bin/bash

# D√©finir les codes de couleur ANSI et styles
RED='\033[38;5;196m'
GREEN='\033[38;5;46m'
YELLOW='\033[38;5;226m'
BLUE='\033[38;5;39m'
CYAN='\033[38;5;51m'
MAGENTA='\033[38;5;201m'
ORANGE='\033[38;5;214m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Variables globales
DRY_RUN=false
ENABLE_LOGS=true
LOG_FILE="${HOME}/.gitpush.log"
CONFIG_FILE="${HOME}/.gitpush.conf"
VERSION="2.0.0"

# Fonction de logging
log_message() {
    local level=$1
    local message=$2
    if [[ "$ENABLE_LOGS" == true ]]; then
        echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $message" >> "$LOG_FILE"
    fi
}

# Fonction pour afficher l'aide
show_help() {
    echo -e "${BOLD}GitPush v${VERSION}${NC}"
    echo -e "${YELLOW}Usage:${NC} $(basename "$0") [OPTIONS]"
    echo ""
    echo -e "${YELLOW}Options:${NC}"
    echo -e "  ${GREEN}--dry-run${NC}        Pr√©visualiser les actions sans les ex√©cuter"
    echo -e "  ${GREEN}--no-logs${NC}        D√©sactiver l'enregistrement des logs"
    echo -e "  ${GREEN}--version${NC}        Afficher la version du script"
    echo -e "  ${GREEN}--help${NC}           Afficher ce message d'aide"
    echo ""
    echo -e "${YELLOW}Exemples:${NC}"
    echo -e "  $(basename "$0")              # Ex√©cution normale"
    echo -e "  $(basename "$0") --dry-run    # Mode pr√©visualisation"
    exit 0
}

# Traiter les arguments de ligne de commande
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            echo -e "${CYAN}${BOLD}Mode DRY-RUN activ√© - Aucune modification ne sera effectu√©e${NC}"
            log_message "INFO" "Mode dry-run activ√©"
            shift
            ;;
        --no-logs)
            ENABLE_LOGS=false
            shift
            ;;
        --version)
            echo -e "${BOLD}GitPush v${VERSION}${NC}"
            exit 0
            ;;
        --help)
            show_help
            ;;
        *)
            echo -e "${RED}${BOLD}Option inconnue: $1${NC}"
            show_help
            ;;
    esac
done

# V√©rifier la connexion r√©seau
check_network() {
    if ! git ls-remote --exit-code origin &>/dev/null; then
        echo -e "${RED}${BOLD}Erreur:${NC} Impossible de se connecter au d√©p√¥t distant."
        echo -e "${YELLOW}${BOLD}V√©rifiez votre connexion r√©seau et r√©essayez.${NC}"
        log_message "ERROR" "√âchec de la connexion au d√©p√¥t distant"
        exit 1
    fi
    log_message "INFO" "Connexion au d√©p√¥t distant r√©ussie"
}

# Ex√©cuter une commande (respecte le mode dry-run)
execute_command() {
    local cmd=$1
    local description=${2:-"Ex√©cution de la commande"}

    if [[ "$DRY_RUN" == true ]]; then
        echo -e "${CYAN}${BOLD}[DRY-RUN]${NC} $description: ${YELLOW}$cmd${NC}"
        log_message "DRY-RUN" "$description: $cmd"
    else
        log_message "EXEC" "$description: $cmd"
        eval "$cmd"
        return $?
    fi
    return 0
}

# V√©rifier si GitHub CLI est install√©
check_gh_cli() {
    if command -v gh &> /dev/null; then
        return 0
    fi
    return 1
}

# Cr√©er une Pull Request avec GitHub CLI
create_pull_request() {
    local branch_name=$1
    local base_branch=${2:-$MAIN_BRANCH}

    if ! check_gh_cli; then
        echo -e "${YELLOW}${BOLD}GitHub CLI (gh) n'est pas install√©.${NC}"
        echo -e "${CYAN}Installez-le pour cr√©er automatiquement des Pull Requests: ${BLUE}https://cli.github.com${NC}"
        log_message "WARN" "GitHub CLI non disponible pour la cr√©ation de PR"
        return 1
    fi

    echo -e "${YELLOW}${BOLD}Voulez-vous cr√©er une Pull Request ?${NC}"
    select choice in "Oui" "Non"; do
        case $REPLY in
            1)
                read -e -p "Titre de la PR (vide pour utiliser le nom de branche): " pr_title
                read -e -p "Description de la PR (optionnel): " pr_description

                if [[ -z "$pr_title" ]]; then
                    pr_title="${branch_name}"
                fi

                local gh_cmd="gh pr create --base \"$base_branch\" --head \"$branch_name\" --title \"$pr_title\""
                if [[ -n "$pr_description" ]]; then
                    gh_cmd="$gh_cmd --body \"$pr_description\""
                fi

                execute_command "$gh_cmd" "Cr√©ation de la Pull Request"

                if [[ $? -eq 0 ]]; then
                    echo -e "${GREEN}${BOLD}Pull Request cr√©√©e avec succ√®s !${NC}"
                    log_message "INFO" "Pull Request cr√©√©e: $pr_title"
                else
                    echo -e "${RED}${BOLD}Erreur lors de la cr√©ation de la Pull Request.${NC}"
                    log_message "ERROR" "√âchec de la cr√©ation de la Pull Request"
                fi
                break
                ;;
            2)
                echo -e "${YELLOW}${BOLD}Pull Request non cr√©√©e.${NC}"
                break
                ;;
            *)
                echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1 ou 2.${NC}"
                ;;
        esac
    done
}

# Squash commits interactif
squash_commits() {
    local branch_name=$1
    local base_branch=$2

    echo -e "${YELLOW}${BOLD}Voulez-vous squash vos commits avant le merge ?${NC}"
    select choice in "Oui" "Non"; do
        case $REPLY in
            1)
                local commit_count=$(git rev-list --count "$base_branch".."$branch_name")
                if [[ $commit_count -le 1 ]]; then
                    echo -e "${YELLOW}${BOLD}Un seul commit d√©tect√©, pas besoin de squash.${NC}"
                    return 0
                fi

                echo -e "${CYAN}${BOLD}$commit_count commits seront squash√©s.${NC}"
                execute_command "git reset --soft $base_branch" "Reset soft vers $base_branch"

                if [[ "$DRY_RUN" == false ]]; then
                    read -e -p "Message du commit squash√©: " squash_message
                    execute_command "git commit -m \"$squash_message\"" "Cr√©ation du commit squash√©"
                fi

                log_message "INFO" "Commits squash√©s: $commit_count commits ‚Üí 1 commit"
                break
                ;;
            2)
                echo -e "${YELLOW}${BOLD}Pas de squash.${NC}"
                break
                ;;
            *)
                echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1 ou 2.${NC}"
                ;;
        esac
    done
}

# Cr√©er un tag de version
create_version_tag() {
    echo -e "${YELLOW}${BOLD}Voulez-vous cr√©er un tag de version ?${NC}"
    select choice in "Oui" "Non"; do
        case $REPLY in
            1)
                read -e -p "Nom du tag (ex: v1.0.0): " tag_name
                read -e -p "Message du tag (optionnel): " tag_message

                if [[ -z "$tag_name" ]]; then
                    echo -e "${RED}${BOLD}Le nom du tag ne peut pas √™tre vide.${NC}"
                    return 1
                fi

                local tag_cmd="git tag"
                if [[ -n "$tag_message" ]]; then
                    tag_cmd="$tag_cmd -a \"$tag_name\" -m \"$tag_message\""
                else
                    tag_cmd="$tag_cmd \"$tag_name\""
                fi

                execute_command "$tag_cmd" "Cr√©ation du tag $tag_name"
                execute_command "git push origin \"$tag_name\"" "Push du tag vers le d√©p√¥t distant"

                echo -e "${GREEN}${BOLD}Tag $tag_name cr√©√© et pouss√© avec succ√®s.${NC}"
                log_message "INFO" "Tag cr√©√©: $tag_name"
                break
                ;;
            2)
                echo -e "${YELLOW}${BOLD}Aucun tag cr√©√©.${NC}"
                break
                ;;
            *)
                echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1 ou 2.${NC}"
                ;;
        esac
    done
}

# D√©tecter la branche principale (master ou main)
detect_main_branch() {
    if git show-ref --verify --quiet refs/heads/main; then
        echo "main"
    elif git show-ref --verify --quiet refs/heads/master; then
        echo "master"
    else
        echo "main" # Par d√©faut si aucune des deux n'existe
    fi
}

# V√©rifier si la branche develop existe
check_develop_branch_exists() {
    git show-ref --verify --quiet refs/heads/develop
    return $?
}

# Cr√©er la branche develop √† partir de la branche principale
create_develop_branch() {
    local main_branch=$1
    echo -e "${YELLOW}${BOLD}Cr√©ation de la branche develop √† partir de ${BLUE}${main_branch}${NC}..."
    log_message "INFO" "Cr√©ation de la branche develop depuis $main_branch"

    execute_command "git checkout \"$main_branch\"" "Basculer vers $main_branch" || exit 1
    execute_command "git pull origin \"$main_branch\"" "Mettre √† jour $main_branch" || exit 1
    execute_command "git checkout -b develop" "Cr√©er la branche develop" || exit 1
    execute_command "git push -u origin develop" "Pousser develop vers le d√©p√¥t distant" || exit 1

    echo -e "${GREEN}${BOLD}Branche develop cr√©√©e avec succ√®s.${NC}"
    log_message "INFO" "Branche develop cr√©√©e avec succ√®s"
}

# Branche principale d√©tect√©e
MAIN_BRANCH=$(detect_main_branch)
# Branche de base pour les nouvelles fonctionnalit√©s (par d√©faut la branche principale)
BASE_BRANCH=$MAIN_BRANCH

# Liste des types de branches accept√©s avec ic√¥nes
BRANCH_ICONS=(
    "${GREEN}${BOLD}üåü feature${NC}"
    "${BLUE}${BOLD}üîÑ refactor${NC}"
    "${RED}${BOLD}üõ†Ô∏è  fix${NC}"
    "${ORANGE}${BOLD}üß∞ chore${NC}"
    "${CYAN}${BOLD}üì¶ update${NC}"
    "${MAGENTA}${BOLD}üöë hotfix${NC}"
    "${GREEN}${BOLD}üöÄ release${NC}"
)

BRANCH_TYPES=("feature" "refactor" "fix" "chore" "update" "hotfix" "release")

# Fonction pour valider le nom de la branche
validate_branch_name() {
    local name=$1
    if [[ -z "$name" ]]; then
        echo -e "${RED}${BOLD}Erreur:${NC} Le nom de la fonctionnalit√© ne peut pas √™tre vide."
        return 1
    fi
    if [[ ! $name =~ ^[a-zA-Z0-9][a-zA-Z0-9_-]*$ ]]; then
        echo -e "${RED}${BOLD}Erreur:${NC} Le nom de la fonctionnalit√© doit commencer par une lettre ou un chiffre et ne contenir que des lettres, chiffres, tirets (-) et underscores (_)."
        return 1
    fi
    if [[ ${#name} -gt 50 ]]; then
        echo -e "${RED}${BOLD}Erreur:${NC} Le nom est trop long (maximum 50 caract√®res)."
        return 1
    fi
    return 0
}

# V√©rification de la branche active
check_branch() {
    local current_branch
    current_branch=$(git symbolic-ref --short HEAD)
    echo -e "${YELLOW}${BOLD}Vous √™tes actuellement sur la branche : ${BLUE}${current_branch}${NC}"

    # V√©rifier si on est sur la branche principale (master ou main)
    if [[ "$current_branch" == "$MAIN_BRANCH" ]]; then
        echo -e "${RED}${BOLD}Erreur:${NC} Vous ne pouvez pas travailler directement sur la branche principale ($MAIN_BRANCH)."

        # V√©rifier si la branche develop existe
        if ! check_develop_branch_exists; then
            echo -e "${YELLOW}${BOLD}La branche develop n'existe pas. Voulez-vous la cr√©er ?${NC}"
            select choice in "Oui" "Non"; do
                case $REPLY in
                    1)
                        create_develop_branch "$MAIN_BRANCH"
                        current_branch="develop"
                        BASE_BRANCH="develop"
                        break
                        ;;
                    2)
                        echo -e "${RED}${BOLD}Abandon du script.${NC}"
                        exit 1
                        ;;
                    *)
                        echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1 ou 2.${NC}"
                        ;;
                esac
            done
        else
            echo -e "${YELLOW}${BOLD}Voulez-vous changer pour la branche develop ?${NC}"
            select choice in "Oui" "Non"; do
                case $REPLY in
                    1)
                        git checkout develop || {
                            echo -e "${RED}${BOLD}Erreur:${NC} impossible de basculer sur develop."
                            exit 1
                        }
                        current_branch="develop"
                        BASE_BRANCH="develop"
                        break
                        ;;
                    2)
                        echo -e "${RED}${BOLD}Abandon du script.${NC}"
                        exit 1
                        ;;
                    *)
                        echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1 ou 2.${NC}"
                        ;;
                esac
            done
        fi
    fi

    # Demander √† l'utilisateur s'il veut continuer sur la branche actuelle ou en cr√©er une nouvelle
    echo -e "${YELLOW}${BOLD}Que souhaitez-vous faire ?${NC}"
    echo -e "  ${GREEN}${BOLD}1) Continuer${NC} - Continuer √† travailler sur la branche actuelle: ${BLUE}${current_branch}${NC}"
    echo -e "  ${YELLOW}${BOLD}2) Nouvelle branche${NC} - Cr√©er une nouvelle branche bas√©e sur ${BLUE}${MAIN_BRANCH}${NC}"

    # Ajouter l'option develop si elle existe et n'est pas la branche courante
    if check_develop_branch_exists && [[ "$current_branch" != "develop" ]]; then
        echo -e "  ${CYAN}${BOLD}3) Develop${NC} - Cr√©er une nouvelle branche bas√©e sur ${BLUE}develop${NC}"
        echo -e "  ${RED}${BOLD}4) Quitter${NC} - Abandonner le script"
        max_choice=4
    else
        echo -e "  ${RED}${BOLD}3) Quitter${NC} - Abandonner le script"
        max_choice=3
    fi

    while true; do
        read -p "Votre choix (1-$max_choice) : " choice
        case $choice in
            1)
                echo -e "${GREEN}${BOLD}Continuation sur la branche actuelle: ${BLUE}${current_branch}${NC}"
                BASE_BRANCH=$current_branch
                break
                ;;
            2)
                echo -e "${YELLOW}${BOLD}Cr√©ation d'une nouvelle branche bas√©e sur ${BLUE}${MAIN_BRANCH}${NC}"
                # On d√©finit la branche de base comme la branche principale
                BASE_BRANCH=$MAIN_BRANCH
                break
                ;;
            3)
                if [[ $max_choice -eq 4 ]]; then
                    echo -e "${CYAN}${BOLD}Cr√©ation d'une nouvelle branche bas√©e sur ${BLUE}develop${NC}"
                    BASE_BRANCH="develop"
                    break
                else
                    echo -e "${RED}${BOLD}Abandon du script.${NC}"
                    exit 1
                fi
                ;;
            4)
                if [[ $max_choice -eq 4 ]]; then
                    echo -e "${RED}${BOLD}Abandon du script.${NC}"
                    exit 1
                else
                    echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner un nombre entre 1 et $max_choice.${NC}"
                fi
                ;;
            *)
                echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner un nombre entre 1 et $max_choice.${NC}"
                ;;
        esac
    done
}

# V√©rification des modifications locales non index√©es
check_local_changes() {
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo -e "${RED}${BOLD}Erreur:${NC} Vous avez des modifications locales non valid√©es."
        echo -e "${YELLOW}${BOLD}Voulez-vous les valider ou les remiser ?${NC}"
        echo -e "  ${GREEN}${BOLD}1) Valider${NC} - Ajouter et valider vos modifications dans un commit."
        echo -e "  ${YELLOW}${BOLD}2) Remiser${NC} - Enregistrer temporairement vos modifications pour y revenir plus tard."
        echo -e "  ${RED}${BOLD}3) Annuler le script${NC} - Quitter sans rien faire."

        # Lire le choix de l'utilisateur
        read -p "Votre choix (1, 2 ou 3) : " choice
        case $choice in
            1)
                echo -e "${YELLOW}${BOLD}Validation des modifications locales...${NC}"
                git add . || exit 1
                read -e -p "Entrez le message de commit : " MESSAGE_COMMIT
                git commit -m "$MESSAGE_COMMIT" || exit 1
                ;;
            2)
                echo -e "${YELLOW}${BOLD}Remise des modifications locales...${NC}"
                git stash || exit 1
                ;;
            3)
                echo -e "${RED}${BOLD}Abandon du script.${NC}"
                exit 1
                ;;
            *)
                echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1, 2 ou 3.${NC}"
                check_local_changes # Relancer la fonction en cas de choix invalide
                ;;
        esac
    fi
}

# S√©lectionner le type de branche
select_type_branche() {
    echo -e "${YELLOW}${BOLD}S√©lectionnez le type de branche :${NC}"

    # Afficher chaque option avec ses couleurs et styles
    for i in "${!BRANCH_ICONS[@]}"; do
        echo -e "  ${BOLD}$((i+1))) ${BRANCH_ICONS[i]}${NC}"
    done

    # Lire le choix de l'utilisateur
    while true; do
        read -p "Votre choix (1-${#BRANCH_ICONS[@]}) : " choice
        if [[ "$choice" =~ ^[1-7]$ ]] && (( choice >= 1 && choice <= ${#BRANCH_ICONS[@]} )); then
            TYPE_BRANCHE=${BRANCH_TYPES[$((choice-1))]}
            echo -e "${GREEN}${BOLD}Type s√©lectionn√© : ${BRANCH_ICONS[$((choice-1))]}${NC}"
            break
        else
            echo -e "${RED}${BOLD}Choix invalide. Veuillez entrer un nombre entre 1 et ${#BRANCH_ICONS[@]}.${NC}"
        fi
    done
}

# Demander et valider le nom de la fonctionnalit√©
get_branch_name() {
    while true; do
        read -e -p "Entrez le nom de la fonctionnalit√© : " NOM_FONCTIONNALITE
        if validate_branch_name "$NOM_FONCTIONNALITE"; then
            break
        fi
        echo -e "${YELLOW}${BOLD}Veuillez r√©essayer.${NC}"
    done
}

# Cr√©er une branche fonctionnelle
create_branch() {
    local branch_name=$1
    local current_branch
    current_branch=$(git symbolic-ref --short HEAD)

    log_message "INFO" "Cr√©ation de branche: $branch_name depuis $BASE_BRANCH"

    # Si on est d√©j√† sur la branche de base, on fait juste un pull
    if [[ "$current_branch" == "$BASE_BRANCH" ]]; then
        echo -e "${GREEN}${BOLD}Mise √† jour de la branche ${BASE_BRANCH}...${NC}"
        execute_command "git pull origin \"$BASE_BRANCH\"" "Mettre √† jour $BASE_BRANCH" || exit 1
    else
        # Sinon, on bascule sur la branche de base
        echo -e "${GREEN}${BOLD}Cr√©ation de la branche ${branch_name} √† partir de ${BASE_BRANCH}...${NC}"
        execute_command "git checkout \"$BASE_BRANCH\"" "Basculer vers $BASE_BRANCH" || exit 1
        execute_command "git pull origin \"$BASE_BRANCH\"" "Mettre √† jour $BASE_BRANCH" || exit 1
    fi

    # Si on est sur la branche principale et qu'on veut cr√©er une nouvelle branche
    if [[ "$current_branch" == "$BASE_BRANCH" && "$branch_name" != "$current_branch" ]]; then
        execute_command "git checkout -b \"$branch_name\"" "Cr√©er la branche $branch_name" || exit 1
        log_message "INFO" "Branche $branch_name cr√©√©e avec succ√®s"
    fi
}

# Valider et pousser les modifications
commit_and_push() {
    local branch_name=$1

    log_message "INFO" "D√©but du commit et push pour $branch_name"

    if ! git diff --quiet || ! git diff --cached --quiet; then
        read -e -p "Entrez le message de commit : " MESSAGE_COMMIT

        execute_command "git add ." "Ajout des modifications" || exit 1
        execute_command "git commit -m \"$MESSAGE_COMMIT\"" "Cr√©ation du commit" || exit 1

        log_message "INFO" "Commit cr√©√©: $MESSAGE_COMMIT"
    fi

    # V√©rifier la connexion r√©seau avant de pousser
    check_network

    execute_command "git push -u origin \"$branch_name\"" "Push vers le d√©p√¥t distant" || exit 1

    echo -e "${GREEN}${BOLD}La branche ${branch_name} a √©t√© pouss√©e avec succ√®s.${NC}"
    log_message "INFO" "Branche $branch_name pouss√©e avec succ√®s"
}

# Fusionner dans la branche de base
merge_to_base() {
    local branch_name=$1
    local current_branch
    current_branch=$(git symbolic-ref --short HEAD)

    log_message "INFO" "D√©but de la fusion de $branch_name vers $BASE_BRANCH"

    # Si on est d√©j√† sur la branche de base, pas besoin de fusion
    if [[ "$current_branch" == "$BASE_BRANCH" ]]; then
        echo -e "${GREEN}${BOLD}D√©j√† sur la branche ${BASE_BRANCH}, pas besoin de fusion.${NC}"
        log_message "INFO" "D√©j√† sur $BASE_BRANCH, aucune fusion n√©cessaire"
        return 0
    fi

    # Si la branche actuelle est la m√™me que celle qu'on veut fusionner, on pousse simplement
    if [[ "$current_branch" == "$branch_name" ]]; then
        echo -e "${YELLOW}${BOLD}Pouss√©e de la branche ${branch_name}...${NC}"
        execute_command "git push origin \"$branch_name\"" "Push de $branch_name" || exit 1
        echo -e "${GREEN}${BOLD}Pouss√©e r√©ussie.${NC}"
        log_message "INFO" "Branche $branch_name pouss√©e avec succ√®s"
        return 0
    fi

    # Proposer le squash avant merge
    squash_commits "$branch_name" "$BASE_BRANCH"

    # Sinon, on proc√®de √† la fusion
    echo -e "${YELLOW}${BOLD}Fusion de ${branch_name} dans ${BASE_BRANCH}...${NC}"

    execute_command "git checkout \"$BASE_BRANCH\"" "Basculer vers $BASE_BRANCH" || exit 1
    execute_command "git pull origin \"$BASE_BRANCH\"" "Mettre √† jour $BASE_BRANCH" || exit 1

    # Tentative de merge avec gestion des conflits
    if [[ "$DRY_RUN" == false ]]; then
        if ! git merge --no-ff "$branch_name"; then
            echo -e "${RED}${BOLD}Conflit de fusion d√©tect√© !${NC}"
            echo -e "${YELLOW}${BOLD}Options disponibles :${NC}"
            echo -e "  ${GREEN}1) R√©soudre manuellement${NC} - Ouvrez vos fichiers et r√©solvez les conflits"
            echo -e "  ${RED}2) Annuler le merge${NC} - Annuler la fusion et revenir √† l'√©tat pr√©c√©dent"

            select choice in "R√©soudre" "Annuler"; do
                case $REPLY in
                    1)
                        echo -e "${YELLOW}${BOLD}R√©solvez les conflits dans vos fichiers, puis :${NC}"
                        echo -e "  1. ${CYAN}git add <fichiers-r√©solus>${NC}"
                        echo -e "  2. ${CYAN}git commit${NC}"
                        echo -e "  3. Relancez ce script pour continuer"
                        log_message "WARN" "Conflits de merge d√©tect√©s sur $branch_name ‚Üí $BASE_BRANCH"
                        exit 1
                        ;;
                    2)
                        git merge --abort
                        echo -e "${RED}${BOLD}Fusion annul√©e.${NC}"
                        log_message "INFO" "Fusion annul√©e par l'utilisateur"
                        exit 1
                        ;;
                    *)
                        echo -e "${RED}${BOLD}Choix invalide.${NC}"
                        ;;
                esac
            done
        fi
    else
        execute_command "git merge --no-ff \"$branch_name\"" "Merge de $branch_name vers $BASE_BRANCH"
    fi

    execute_command "git push origin \"$BASE_BRANCH\"" "Push de $BASE_BRANCH vers le d√©p√¥t distant" || exit 1

    echo -e "${GREEN}${BOLD}Fusion r√©ussie.${NC}"
    log_message "INFO" "Fusion r√©ussie: $branch_name ‚Üí $BASE_BRANCH"
}

# Supprimer une branche locale et distante apr√®s fusion
delete_branch() {
    local branch_name=$1

    log_message "INFO" "Suppression de la branche: $branch_name"

    echo -e "${YELLOW}${BOLD}Suppression de la branche locale ${branch_name}...${NC}"

    if [[ "$DRY_RUN" == false ]]; then
        if ! git branch -d "$branch_name"; then
            echo -e "${YELLOW}${BOLD}Aucune modification d√©tect√©e dans ${branch_name}. Suppression forc√©e.${NC}"
            git branch -D "$branch_name"
        fi
    else
        execute_command "git branch -d \"$branch_name\"" "Suppression de la branche locale $branch_name"
    fi

    echo -e "${GREEN}${BOLD}Branche locale supprim√©e avec succ√®s.${NC}"

    # Suppression de la branche distante
    echo -e "${YELLOW}${BOLD}Suppression de la branche distante ${branch_name}...${NC}"

    if [[ "$DRY_RUN" == false ]]; then
        if ! git push origin --delete "$branch_name"; then
            echo -e "${RED}${BOLD}Erreur : impossible de supprimer la branche distante ${branch_name}.${NC}"
            log_message "ERROR" "√âchec de la suppression de la branche distante $branch_name"
        else
            echo -e "${GREEN}${BOLD}Branche distante ${branch_name} supprim√©e avec succ√®s.${NC}"
            log_message "INFO" "Branche $branch_name supprim√©e (locale et distante)"
        fi
    else
        execute_command "git push origin --delete \"$branch_name\"" "Suppression de la branche distante $branch_name"
    fi
}

# Script principal
check_branch
check_local_changes

# Variable pour stocker le nom de la branche de travail
BRANCHE_TRAVAIL=""

# Si on continue sur la branche actuelle
if [[ "$BASE_BRANCH" != "$MAIN_BRANCH" ]]; then
    BRANCHE_TRAVAIL=$(git symbolic-ref --short HEAD)
    echo -e "${GREEN}${BOLD}Continuation du travail sur la branche : ${BLUE}${BRANCHE_TRAVAIL}${NC}"
else
    # Si on cr√©e une nouvelle branche
    select_type_branche
    get_branch_name
    BRANCHE_TRAVAIL="${TYPE_BRANCHE}/${NOM_FONCTIONNALITE}"
    create_branch "$BRANCHE_TRAVAIL"
fi

# Valider et pousser les modifications
commit_and_push "$BRANCHE_TRAVAIL"

# Proposer de cr√©er une Pull Request
if [[ "$BRANCHE_TRAVAIL" != "$MAIN_BRANCH" && "$BRANCHE_TRAVAIL" != "develop" ]]; then
    create_pull_request "$BRANCHE_TRAVAIL" "$BASE_BRANCH"
fi

# Demander √† l'utilisateur s'il souhaite fusionner dans la branche principale
echo -e "${YELLOW}${BOLD}Souhaitez-vous fusionner cette branche dans ${BLUE}${MAIN_BRANCH}${NC} ?"
select choice in "Oui" "Non"; do
    case $REPLY in
        1)
            merge_to_base "$BRANCHE_TRAVAIL"

            # Proposer de cr√©er un tag de version apr√®s une fusion r√©ussie
            if [[ "$BASE_BRANCH" == "$MAIN_BRANCH" ]]; then
                create_version_tag
            fi

            # Demander si l'utilisateur veut supprimer la branche apr√®s fusion
            if [[ "$BRANCHE_TRAVAIL" != "$MAIN_BRANCH" ]]; then
                echo -e "${YELLOW}${BOLD}Voulez-vous supprimer la branche ${BLUE}${BRANCHE_TRAVAIL}${NC} apr√®s la fusion ?${NC}"
                select _ in "Oui" "Non"; do
                    case $REPLY in
                        1)
                            delete_branch "$BRANCHE_TRAVAIL"
                            break
                            ;;
                        2)
                            echo -e "${GREEN}${BOLD}La branche ${BLUE}${BRANCHE_TRAVAIL}${NC} a √©t√© conserv√©e.${NC}"
                            break
                            ;;
                        *)
                            echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1 ou 2.${NC}"
                            ;;
                    esac
                done
            fi
            break
            ;;
        2)
            echo -e "${GREEN}${BOLD}La branche ${BLUE}${BRANCHE_TRAVAIL}${NC} a √©t√© pouss√©e mais pas fusionn√©e.${NC}"
            break
            ;;
        *)
            echo -e "${RED}${BOLD}Choix invalide. Veuillez s√©lectionner 1 ou 2.${NC}"
            ;;
    esac
done

echo -e "${GREEN}${BOLD}Processus termin√© avec succ√®s !${NC}"
log_message "INFO" "Script termin√© avec succ√®s"
